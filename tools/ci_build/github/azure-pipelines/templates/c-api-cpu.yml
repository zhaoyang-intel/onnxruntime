parameters:
- name: RunOnnxRuntimeTests
  displayName: Run Tests?
  type: boolean
  default: true

- name: DoCompliance
  displayName: Run Compliance Tasks?
  type: boolean
  default: true

- name: PublishingNuget
  displayName: Publishing Nuget Packages and report binary size to mysql
  type: boolean
  default: true

- name: DoEsrp
  displayName: Run code sign tasks? Must be true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: IsReleaseBuild
  displayName: Is a release build? Set it to true if you are doing an Onnx Runtime release.
  type: boolean
  default: false

- name: AdditionalBuildFlags
  displayName: Additional build flags for build.py
  type: string
  default: ''

- name: AdditionalWinBuildFlags
  displayName: Additional build flags that just for Windows Builds
  type: string
  default: ''

- name: OrtNugetPackageId
  displayName: Package name for nuget
  type: string
  default: 'Microsoft.ML.OnnxRuntime'

- name: BuildVariant
  type: string
  default: 'openmp'

jobs:
- job: Linux_C_API_Packaging_CPU_x64
  workspace:
    clean: all
  timeoutInMinutes:  1440
  strategy:
    matrix:
      ARCH_x86_64:
        BASE_IMAGE: centos:7
        ONNXRUNTIME_ARCH: x64
        ONNXRUNTIME_CFLAGS: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all'
        ONNXRUNTIME_CXXFLAGS: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -fcf-protection -O3 -Wl,--strip-all'
        NODEJS_BINDING_ARCH: x64
      ARCH_AARCH64:
        BASE_IMAGE: arm64v8/centos:7
        ONNXRUNTIME_ARCH: aarch64
        ONNXRUNTIME_CFLAGS: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -O3 -Wl,--strip-all'
        ONNXRUNTIME_CXXFLAGS: '-Wp,-D_FORTIFY_SOURCE=2 -Wp,-D_GLIBCXX_ASSERTIONS -fstack-protector-strong -fstack-clash-protection -O3 -Wl,--strip-all'
        NODEJS_BINDING_ARCH: arm64
  pool: 'Linux-CPU'
  steps:
    - template: set-version-number-variables-step.yml
    - template: get-docker-image-steps.yml
      parameters:
        Dockerfile: tools/ci_build/github/linux/docker/inference/x86_64/default/cpu/Dockerfile
        Context: tools/ci_build/github/linux/docker/inference/x86_64/default/cpu
        DockerBuildArgs: "--build-arg BUILD_UID=$( id -u ) --build-arg BASEIMAGE=$(BASE_IMAGE)"
        Repository: onnxruntimecpubuildcentos7$(ONNXRUNTIME_ARCH)

    - task: CmdLine@2
      inputs:
        script: |
          mkdir -p $HOME/.onnx
          docker run --rm -e CFLAGS="$(ONNXRUNTIME_CFLAGS)" -e CXXFLAGS="$(ONNXRUNTIME_CXXFLAGS)" --volume /data/onnx:/data/onnx:ro --volume $(Build.SourcesDirectory):/onnxruntime_src --volume $(Build.BinariesDirectory):/build \
          --volume $HOME/.onnx:/home/onnxruntimedev/.onnx -e NIGHTLY_BUILD onnxruntimecpubuildcentos7$(ONNXRUNTIME_ARCH) /bin/bash -c "python3 \
          /onnxruntime_src/tools/ci_build/build.py --build_java --build_nodejs --build_dir /build --config Release \
          --skip_submodule_sync  --build_shared_lib ${{ parameters.AdditionalBuildFlags }} && cd /build/Release && make install DESTDIR=/build/linux-$(ONNXRUNTIME_ARCH)"
        workingDirectory: $(Build.SourcesDirectory)

    - script: |
       set -e -x
       mkdir $(Build.ArtifactStagingDirectory)/testdata
       cp $(Build.BinariesDirectory)/Release/libcustom_op_library.so* $(Build.ArtifactStagingDirectory)/testdata
       ls -al $(Build.ArtifactStagingDirectory)
      displayName: 'Create Artifacts'

    - template: java-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          arch: 'linux-$(ONNXRUNTIME_ARCH)'
          buildConfig: 'Release'
          artifactName: 'onnxruntime-java-linux-$(ONNXRUNTIME_ARCH)'
          version: '$(OnnxRuntimeVersion)'
          libraryName: 'libonnxruntime.so'
          nativeLibraryName: 'libonnxruntime4j_jni.so'

    - template: c-api-artifacts-package-and-publish-steps-posix.yml
      parameters:
          buildConfig: 'Release'
          artifactName: 'onnxruntime-linux-$(ONNXRUNTIME_ARCH)-$(OnnxRuntimeVersion)'
          artifactNameNoVersionString: 'onnxruntime-linux-$(ONNXRUNTIME_ARCH)'
          libraryName: 'libonnxruntime.so.$(OnnxRuntimeVersion)'

    - template: nodejs-artifacts-package-and-publish-steps-posix.yml
      parameters:
          arch: '$(NODEJS_BINDING_ARCH)'
          artifactName: 'onnxruntime_nodejs-linux-$(ONNXRUNTIME_ARCH)-$(OnnxRuntimeVersion)'
          artifactNameNoVersionString: 'onnxruntime_nodejs-linux-$(ONNXRUNTIME_ARCH)'

    - template: component-governance-component-detection-steps.yml
      parameters :
        condition : 'succeeded'

    - task: mspremier.PostBuildCleanup.PostBuildCleanup-task.PostBuildCleanup@3
      displayName: 'Clean Agent Directories'
      condition: always()
